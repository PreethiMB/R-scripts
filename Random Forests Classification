###########################Machine Learning for Classification#######################################

##Sentinel-1 image classification using RF classifier
#This code builds a Random Forests classification model to classify an image into forests and non-forest
#using the randomforests library. A confusion matrix is created from which PA, UA and OA are derived.
#A variable importance plot is also generated to see the most important variables.
#The classfied output is then exported as a tiff file and can be visualised in QGIS
#Special thanks to Ned Horning (Director of Applied Biodiversity Informatics) fore helping me with the code and 
#answering all my questions related to machine learning classifiers

###############################Set libraries############################################################
library(raster)
library(randomForest)
library(caret)
library(rgdal)
library(RStoolbox)
library(graphics)
library(shapefiles)
library(maptools)

##########################Set Variables and variable paths##########################################
image <- "/home/rus/shared/Preethi/R_practice/Classification/mean_annual_image_29902.tif"
tr_samples <- "/home/rus/shared/Preethi/R_practice/Classification/Forest_Non_Forest_Training_Sample.shp"
Classified_output <- "/home/rus/shared/Preethi/R_practice/Classification/"
Classified_image <- "RF_FNF.tiff"
model_rf <- "/home/rus/shared/Preethi/R_practice/Classification/"
model_type <- "rf"
model_name <- "rf_SAR_classification"
nsamples = 50000
NewIDTr_Poly<-"/home/rus/shared/Preethi/R_practice/Classification/"
NewIDTr_Poly_name <- "Tr_samplesID_test2"
Tr_raster <- "Value_Training_pixels"
###################################Preparing Input Data########################################################

##Note: If there is a stack with multiple bands - then use stack () option to get all bands
##If there is a single band, raster can be used

#Load the image stack
image_stack <- stack(image)


##understanding the image stack
summary(image_stack)
#hist(image_stack[[2]])
#pairs(image_stack) ## to check the correlation between bands
names(image_stack)

#Load the training data (polygon shapefile)
tr_samples <- readOGR(tr_samples)
summary(tr_samples)
tr_samples@data

###Plot the image stack and the training polygons
plot(image_stack[[1]])
plot(tr_samples, add=TRUE)

##Add ID column to the training shapefile
tr_samples$ID<-1:nrow(tr_samples)
tr_samples@data

writeOGR(tr_samples, NewIDTr_Poly, NewIDTr_Poly_name, driver="ESRI Shapefile")

##Read in the shapefile back
Training_samples3<-readOGR(NewIDTr_Poly,NewIDTr_Poly_name)
Training_samples3@data


##Check if there NAs in the training shapefile and remove them
if (any(is.na(Training_samples3$Class))){
  print ("NAs are present")
  Training_samples4<-na.omit(Training_samples3@data)
  Training_samples4
  require(sp)
  Training_samples3<-Training_samples3[Training_samples3$ID %in% Training_samples4$ID,] 
  print (nrow(Training_samples3))
  plot(Training_samples3)
  print("NAs are removed")
}else{
  print ("No NAs observed")
  
}
##Note: The polygon Training_samples4 is only a dataframe. Get only these rows (no Nas) from training_samples3 polygon
#Search for IDs in both the datasets and get the common ones between the two and put it in a new variable
#Training_samples_fin



########check the crs of both the raster stack and the training polygons (they must be the same)
crs_raster <- as.character(crs(image_stack))
crs_training <- as.character(crs(Training_samples3))

if (crs_raster == crs_training){
  print ("Projections Match")
}else {
  print ("Projections do not Match- transforming training polygon projection")
  training <- spTransform(Training_samples3, crs_raster)
  print("Training polygon projection has been transformed")
  print(crs(training))
}

###Make sure the Class column in the training dataset is an integer (If it is text such as Forest, Non Forest, it cannot be read in)

if(is.integer(Training_samples3$Class)){
  print ("Class column is an integer")
}else{
  Training_samples3$Class <- as.integer(Training_samples3$Class)
  print ("Class column converted to integer")
}

#Until here 
#1. The raster stack has been read into R
#2. The Training polygons have been read into R
#3. A new ID column has been added to the training polygons shapefile and saved 
#4. This shapefile with the new column has been added back into R
#5. Omit NAs in the training shapefile
#6. Get the rows that do not have NAs from the original shapefile with the ID column (step 4)
#7. Check crs of bothe raster and training vector and bring them to the same projection
#8. Check if the Class column in the training shapefile is an integer

##################################Training the Classifier##############################################

####To train the raster, the training samples must be converted to the the same type using the rasterize function.
##This takes the polygon object and trasnfers the values to raster cells defined by a raster object.

classes <- rasterize(Training_samples3, image_stack, field="Class", progress="text")

#####Adding colours to the classes

cols <- c("dark green", "Orange")
plot(classes, col=cols, legend=FALSE)
legend("topright", legend=c("Forest", "Non-Forest"), fill=cols, bg="white")

####Generate a mask from the image stack only representing the training pixels 

stack_mask <- mask(image_stack, classes)
plot(stack_mask)

###To make the input training dataset, combine the new brick with the classes dataset
names(classes) <- "class"
trainingbrick <- addLayer(stack_mask, classes)
plot(trainingbrick)

##Extract all these values to a data frame. These values will represent the training data.
##This will be used as an input to the classifier

valuetable <- getValues(trainingbrick)

##get rid of all NAs
valuetable <- na.omit(valuetable)

##convert the table to a data frame and display the first 10 rows
valuetable <- as.data.frame(valuetable)
head(valuetable, n=10)

#####Change the column names
names(valuetable)[1:3]<-c("VV", "VH", "VV_VH")

#Change the class column in the table to factor
valuetable$class<-factor(valuetable$class)

###Visualizing the training dataset for each class for each band - just for visualisation purposes
val_for <- subset(valuetable, class == 1)
hist(val_for$mean_annual_image_29902.1, main = "forest", xlab = "VV",col = "green")

val_nf <- subset(valuetable, class == 2)
hist(val_for$mean_annual_image_29902.1, main = "non forest", xlab = "VV",col = "orange")


##scatterplot shows that the classes cannot be easily differentiated here.
#This differentiation is done by the classifier 
plot(val_for$mean_annual_image_29902.1 ~ val_nf$mean_annual_image_29902.3, pch = ".", col = c("orange", "green"))


##Save the value table as a csv - which contains the raster values for the training pixels for each band and each class
##this can be used later for more analysis
write.csv(valuetable, paste0(Classified_output, Tr_raster, ".csv"))


###############################Building the RF model###############################################

##COnstruct a RF model. The Covariates are found in the columns 1:3 in the valuetable

library(randomForest)
names(valuetable)[1:3]<-names(image_stack)

ptm <-proc.time()
modelRF <- randomForest(x=valuetable[ ,c(1:3)], y=valuetable$class,
                        importance = TRUE)


proc.time () -ptm

#save the model as .rda file. This model can be loaded back using load() function
save(modelRF, file = paste0(model_rf, model_name, ".rda"))

##check the structure, class and names of the modelRF
str(modelRF)
class(modelRF)
names(modelRF)

#Inspect the confusion matrix
modelRF$confusion

colnames(modelRF$confusion) <- c("forest", "Nonforest", "class.error")
rownames(modelRF$confusion) <- c("forest", "Nonforest")
modelRF$confusion

matrix <- modelRF$confusion

#####Calculate the PA, UA and OA from the confusion matrix
# User accuracy
diag(matrix) /rowSums(matrix)

# Producer accuracy
diag(matrix)/colSums(matrix)

#Overall accuracy
sums <- vector()

for(i in 1:dim(matrix)[1]){
  sums[i] <- matrix[i,i]
}

OA <- sum(sums)/sum(matrix)

##check the variable importance plot
varImpPlot(modelRF)


##Double check the names of the bands in the image stack and the columns of the value table
#Maybe change the names in the image stack and valuetable to more meaningful names
names(image_stack)
names(valuetable)


#predict the FNF cover using RF model generated#
ptm <- proc.time()
supervised_classification <- predict(image_stack, 
                                     model = modelRF, 
                                     na.rm=TRUE)
proc.time() - ptm

##Plot the results
cols <- c( "dark green", "Orange")
plot(supervised_classification, col=cols, legend=FALSE)
legend("bottomright", 
       legend=c("forest", "nonforest"), 
       fill=cols, bg="white")

#prediction <- predict(modelRF, valuetable)
#confusionMatrix(data = prediction,  reference = valuetable$class)

##Output this to a raster file
writeRaster(supervised_classification, filename = paste0(Classified_output, Classified_image),
            format = "GTiff", overwrite = TRUE)

